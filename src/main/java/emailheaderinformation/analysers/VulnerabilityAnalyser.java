package emailheaderinformation.analysers;

import com.google.gson.Gson;
import com.google.gson.JsonObject;
import emailheaderinformation.MainWindow;
import emailheaderinformation.database.DbManager;
import emailheaderinformation.model.*;

import java.util.Set;

import static emailheaderinformation.model.Access.*;
import static emailheaderinformation.model.Impact.Value;

/**
 * Created by jaclark on 18/04/16.
 */
public class VulnerabilityAnalyser extends HeaderAnalyser {
  private final static DbManager dbm = new DbManager();
  private final Set<VulnerabilityDisclosure> mVulnerabilityDisclosureSet;
  private String mKeyword;

  public VulnerabilityAnalyser(
                                  Header header,
                                  MainWindow mainWindow,
                                  String keyword,
                                  Set<VulnerabilityDisclosure>
                                      vulnerabilityDisclosureSet) {
    super(header, mainWindow);
    mKeyword = keyword;
    mVulnerabilityDisclosureSet = vulnerabilityDisclosureSet;
  }

  @Override
  public void run() {
    dbm.findVulnerabilitiesForProduct(mKeyword).forEach(object -> {
      JsonObject jsonObject = new Gson().fromJson(object, JsonObject.class);
      AccessBuilder ab = new AccessBuilder();
      JsonObject accessJson = jsonObject.getAsJsonObject("access");
      Access access =
          ab.setAuthentication(Authentication.valueOf(accessJson.get(
              "authentication").getAsString()))
            .setComplexity(Complexity.valueOf(accessJson.get("complexity")
                                                        .getAsString()))
            .setVector(Vector.valueOf(accessJson.get("vector").getAsString()))
            .createAccess();
      ImpactBuilder ib = new ImpactBuilder();
      JsonObject impactJson = jsonObject.getAsJsonObject("impact");
      Impact impact =
          ib.setAvailability(Value.valueOf(impactJson.get("availability")
                                                     .getAsString()))
            .setConfidentiality(Value.valueOf(impactJson.get("confidentiality")
                                                        .getAsString()))
            .setIntegrity(Value.valueOf(impactJson.get("integrity")
                                                  .getAsString()))
            .createImpact();

      VulnerabilityDisclosureBuilder vdb = new VulnerabilityDisclosureBuilder();
      VulnerabilityDisclosure vd = vdb.setAccess(access)
                                      .setImpact(impact)
                                      .setCveId(jsonObject.get("id")
                                                          .getAsString())
                                      .setScore(jsonObject.get("cvss")
                                                          .getAsFloat())
                                      .setSummary(jsonObject.get("summary")
                                                            .getAsString())
                                      .createVulnerabilityDisclosure();

      mVulnerabilityDisclosureSet.add(vd);
    });
  }
}
