package emailheaderinformation.analysers;

import emailheaderinformation.MainWindow;
import emailheaderinformation.model.VulnerabilityDisclosure;

import java.util.Collections;
import java.util.Set;
import java.util.concurrent.ConcurrentSkipListSet;

public class VulnerabilityFinderManagerImpl implements VulnerabilityFinderManager {
  private Set<String> mKeywordSet;
  private MainWindow mMainWindow;
  private Set<VulnerabilityDisclosure> disclosureSet;

  public VulnerabilityFinderManagerImpl (MainWindow mainWindow) {
    mKeywordSet = new ConcurrentSkipListSet<>();
    mMainWindow = mainWindow;
    disclosureSet = new ConcurrentSkipListSet<>();
  }

  @Override public Set<String> getKeywords () {
    return mKeywordSet;
  }

  @Override public Set<VulnerabilityDisclosure> getVulnerabilities () {
    return disclosureSet;
  }

  @Override
  public Set<VulnerabilityDisclosure> getMostRelevantVulnerabilitiesForKeyword (String keyword) {
    return Collections.emptySet();

  }

  @Override public boolean noVulnerabilitiesFound () {
    return disclosureSet.isEmpty();
  }

  @Override public void lookupVulnerabilityForKeyword (String keyword) {
    StringBuilder sb = new StringBuilder();
    String trimmedKeyword = keyword.trim();
    char[] chars = new char[trimmedKeyword.length()];
    trimmedKeyword.getChars(0, trimmedKeyword.length(), chars, 0);
    for (int i = 0, length = chars.length; i < length; i++) {
      char c = chars[i];
      if (Character.isUpperCase(c)) {
        sb.append(Character.toLowerCase(c));
      } else if (Character.isSpaceChar(c)) {
        sb.append(':');
      } else if (c == '(' || c == '[' || c == '{') {
        if (Character.isSpaceChar(chars[i - 1])) {
          sb.deleteCharAt(sb.length() - 1);
        }
        break;
      } else {
        sb.append(c);
      }
    }
    String normalisedProduct = sb.toString();

    // don't repopulate
    if (!mKeywordSet.contains(normalisedProduct)) {
      // prevent other processes adding the same results
      mKeywordSet.add(normalisedProduct);
      VulnerabilityAnalyser va = new VulnerabilityAnalyser(null,
                                                           mMainWindow,
                                                           normalisedProduct,
                                                           disclosureSet);
      mMainWindow.submitToExecutorService(va);
    }
  }
}
